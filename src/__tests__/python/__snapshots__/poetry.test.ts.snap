// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`poetry enabled 1`] = `
Object {
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

*$py.class
*.cover
*.egg
*.egg-info/
*.log
*.manifest
*.mo
*.pot
*.py,cover
*.py[cod]
*.sage.py
*.so
*.spec
.Python
.cache
.coverage
.coverage.*
.dmypy.json
.eggs/
.env
.hypothesis/
.installed.cfg
.ipynb_checkpoints
.mypy_cache/
.nox/
.pybuilder/
.pyre/
.pytest_cache/
.pytype/
.ropeproject
.scrapy
.spyderproject
.spyproject
.tox/
.venv
.webassets-cache
/poetry.toml
/site
ENV/
MANIFEST
__pycache__/
__pypackages__/
build/
celerybeat-schedule
celerybeat.pid
cover/
coverage.xml
cython_debug/
db.sqlite3
db.sqlite3-journal
develop-eggs/
dist/
dmypy.json
docs/_build/
downloads/
eggs/
env.bak/
env/
htmlcov/
instance/
ipython_config.py
lib/
lib64/
local_settings.py
node_modules/
nosetests.xml
parts/
pip-delete-this-directory.txt
pip-log.txt
profile_default/
sdist/
share/python-wheels/
target/
var/
venv.bak/
venv/
wheels/
!/.projen/deps.json
!/.projen/tasks.json
!/pyproject.toml
",
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "name": "pytest",
        "type": "devenv",
        "version": "6.2.1",
      },
      Object {
        "name": "python",
        "type": "runtime",
        "version": "^3.6",
      },
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "env": Object {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": Object {
      "install": Object {
        "category": "00.build",
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": Array [
          Object {
            "exec": "poetry update",
          },
        ],
      },
      "package": Object {
        "category": "20.release",
        "description": "Creates source archive and wheel for distribution.",
        "name": "package",
        "steps": Array [
          Object {
            "exec": "poetry build",
          },
        ],
      },
      "test": Object {
        "category": "10.test",
        "description": "Runs tests",
        "name": "test",
        "steps": Array [
          Object {
            "exec": "pytest",
          },
        ],
      },
      "upload": Object {
        "category": "20.release",
        "description": "Uploads the package to PyPI.",
        "name": "upload",
        "steps": Array [
          Object {
            "exec": "poetry publish",
          },
        ],
      },
      "upload:test": Object {
        "category": "20.release",
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "upload:test",
        "steps": Array [
          Object {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "poetry.toml": "
[repositories.testpypi]
url = \\"https://test.pypi.org/legacy/\\"
",
  "pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

[build-system]
requires = [ \\"poetry_core>=1.0.0\\" ]
build-backend = \\"poetry.core.masonry.api\\"

[tool.poetry]
name = \\"test-python-project\\"
version = \\"0.1.0\\"
description = \\"a short project description\\"
license = \\"Apache Software License\\"
authors = [ \\"First Last <email@example.com>\\" ]
readme = \\"README.md\\"
homepage = \\"http://www.example.com\\"
scripts = { }

  [tool.poetry.dependencies]
  python = \\"^3.6\\"

  [tool.poetry.dev-dependencies]
  pytest = \\"6.2.1\\"
",
  "test_python_project/__init__.py": "__version__ = \\"0.1.0\\"
",
  "test_python_project/__main__.py": "from .example import hello

if __name__ == \\"__main__\\":
    name = input(\\"What is your name? \\")
    print(hello(name))
",
  "test_python_project/example.py": "def hello(name: str) -> str:
    \\"\\"\\"A simple greeting.
    Args:
        name (str): Name to greet.
    Returns:
        str: greeting message
    \\"\\"\\"
    return f\\"Hello {name}!\\"
",
  "tests/__init__.py": "",
  "tests/test_example.py": "import pytest

from test_python_project.example import hello

@pytest.mark.parametrize(
    (\\"name\\", \\"expected\\"),
    [
        (\\"A. Musing\\", \\"Hello A. Musing!\\"),
        (\\"traveler\\", \\"Hello traveler!\\"),
        (\\"projen developer\\", \\"Hello projen developer!\\"),
    ],
)
def test_hello(name, expected):
    \\"\\"\\"Example test with parametrization.\\"\\"\\"
    assert hello(name) == expected
",
}
`;
